{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/sync.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar write = require( 'fs' ).writeFile;\n\n\n// MAIN //\n\n/**\n* Asynchronously writes data to a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(string|Buffer)} data - data to write\n* @param {(Object|string)} [options] - options\n* @param {Function} clbk - callback to invoke after writing data to a file\n*\n* @example\n* function onWrite( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* writeFile( './beep/boop.txt', 'beep boop\\n', onWrite );\n*/\nfunction writeFile() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\twrite.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default writeFile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar writeFile = require( 'fs' ).writeFileSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously writes data to a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(string|Buffer)} data - data to write\n* @param {(Object|string)} [options] - options\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = writeFileSync( './beep/boop.txt', 'beep boop\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction writeFileSync( file, data, options ) {\n\ttry {\n\t\tif ( arguments.length > 2 ) {\n\t\t\twriteFile( file, data, options );\n\t\t} else {\n\t\t\twriteFile( file, data );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default writeFileSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Write data to a file.\n*\n* @module @stdlib/fs-write-file\n*\n* @example\n* import writeFile from '@stdlib/fs-write-file';\n*\n* function onWrite( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* writeFile( './beep/boop.txt', 'beep boop\\n', onWrite );\n*\n* @example\n* import { sync as writeFileSync } from '@stdlib/fs-write-file';\n*\n* var err = writeFileSync( './beep/boop.txt', 'beep boop\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["write","require$$0","writeFile","args","i","arguments","length","push","apply","writeFileSync","file","data","options","err","setReadOnly","main","sync"],"mappings":";;8mBAsBIA,EAAQC,EAAgBC,UAsB5B,SAASA,IACR,IAAIC,EACAC,EAEJ,IADAD,EAAO,GACDC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAClCD,EAAKI,KAAMF,UAAWD,IAEvBJ,EAAMQ,MAAO,KAAML,EACpB,CC9BA,IAAID,EAAYD,EAAgBQ,cAmBhC,SAASA,EAAeC,EAAMC,EAAMC,GACnC,IACMP,UAAUC,OAAS,EACvBJ,EAAWQ,EAAMC,EAAMC,GAEvBV,EAAWQ,EAAMC,EAElB,CAAC,MAAQE,GACT,OAAOA,CACP,CACD,OAAO,IACR,CCEAC,EAAAC,EAAA,OAAAC"}